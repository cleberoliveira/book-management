{
  "info": {
    "name": "Coleção API - Book Management",
    "_postman_id": "d46b5e9e-d8a2-4d58-9d4e-9a8b12345678",
    "description": "Coleção para testar localmente as APIs do projeto Book Management.\n\nInstruções:\n1. Configure a variável de ambiente 'baseUrl' para sua URL local\n2. Execute primeiro os testes de login para gerar os tokens\n3. Os testes estão separados em duas pastas: Admin e Usuário Normal\n4. Cada teste inclui validações automáticas do resultado esperado",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://book-management.test/api"
    },
    {
      "key": "admin_token",
      "value": ""
    },
    {
      "key": "user_token",
      "value": ""
    },
    {
      "key": "last_author_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Autenticação",
      "item": [
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Resposta contém token de acesso', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.environment.set('admin_token', jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@demo.com\",\n    \"password\": \"1234\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Realiza login como administrador. Deve retornar um token de acesso válido."
          }
        },
        {
          "name": "Login Usuário Normal",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Resposta contém token de acesso', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.environment.set('user_token', jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"user@demo.com\",\n    \"password\": \"1234\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Realiza login como usuário normal. Deve retornar um token de acesso válido."
          }
        }
      ],
      "description": "Endpoints de autenticação para obter tokens de acesso"
    },
    {
      "name": "Testes Admin",
      "item": [
        {
          "name": "Criar Autor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Autor foi criado corretamente', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.nome).to.eql('Autor Teste Admin');",
                  "    pm.expect(jsonData.estado).to.eql('ativo');",
                  "    pm.environment.set('last_author_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nome\": \"Autor Teste Admin\",\n    \"estado\": \"ativo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Admin cria um novo autor. Deve retornar status 201 e os dados do autor criado."
          }
        },
        {
          "name": "Listar Autores",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Resposta é um array', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Admin lista todos os autores. Deve retornar um array com os autores cadastrados."
          }
        },
        {
          "name": "Atualizar Autor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Autor foi atualizado', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.nome).to.eql('Autor Atualizado');",
                  "    pm.expect(jsonData.estado).to.eql('inativo');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nome\": \"Autor Atualizado\",\n    \"estado\": \"inativo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors/{{last_author_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{last_author_id}}"]
            },
            "description": "Admin atualiza um autor existente. Deve retornar status 200 e os dados atualizados."
          }
        }
      ],
      "description": "Testes das funcionalidades exclusivas do administrador"
    },
    {
      "name": "Testes Usuário Normal",
      "item": [
        {
          "name": "Tentar Criar Autor (Não Autorizado)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 403', function() {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Mensagem de erro adequada', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Acesso não autorizado.');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{user_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nome\": \"Autor Teste Usuário\",\n    \"estado\": \"ativo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Usuário normal tenta criar um autor. Deve retornar erro 403 (Forbidden)."
          }
        },
        {
          "name": "Tentar Listar Autores (Não Autorizado)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 403', function() {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Mensagem de erro adequada', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Acesso não autorizado.');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{user_token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            },
            "description": "Usuário normal tenta listar autores. Deve retornar erro 403 (Forbidden)."
          }
        }
      ],
      "description": "Testes para verificar as restrições de acesso do usuário normal"
    },
    {
      "name": "Logout",
      "item": [
        {
          "name": "Logout Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Mensagem de logout correta', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Logout realizado com sucesso');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": ["{{baseUrl}}"],
              "path": ["logout"]
            },
            "description": "Realiza logout do administrador. Deve invalidar o token atual."
          }
        },
        {
          "name": "Logout Usuário Normal",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code é 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Mensagem de logout correta', function() {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Logout realizado com sucesso');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{user_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": ["{{baseUrl}}"],
              "path": ["logout"]
            },
            "description": "Realiza logout do usuário normal. Deve invalidar o token atual."
          }
        }
      ],
      "description": "Endpoints para encerrar as sessões dos usuários"
    }
  ]
}


